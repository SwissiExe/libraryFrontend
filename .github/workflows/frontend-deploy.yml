name: ci

on:
  push:
    branches:
      - 'main'

jobs:
  build-and-push-to-docker-hub:
    runs-on: ubuntu-latest
    outputs:
      commit-hash: ${{ steps.get-commit-hash.outputs.commit-hash }}
      timestamp: ${{ steps.get-timestamp.outputs.timestamp }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Get Short Commit Hash
        id: get-commit-hash
        run: echo "::set-output name=commit-hash::$(git rev-parse --short HEAD)"

      - name: Get Timestamps
        id: get-timestamp
        run: echo "::set-output name=timestamp::$(date +'%Y-%m-%d-%H-%M')"

      - name: Build and Push Docker Image to Docker Hub
        env:
          DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ steps.get-commit-hash.outputs.commit-hash }}-${{ steps.get-timestamp.outputs.timestamp }}
        run: |
          echo "Building the Docker image..."
          docker build -t $DOCKER_HUB_REPO:$IMAGE_TAG -f ./docker/Dockerfile .
          echo "Pushing the Docker image to Docker Hub..."
          docker push $DOCKER_HUB_REPO:$IMAGE_TAG

  pull-from-docker-hub-and-push-to-ecr:
    runs-on: ubuntu-latest
    needs: build-and-push-to-docker-hub
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-pf-aws-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Pull Docker Image from Docker Hub
        env:
          DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ needs.build-and-push-to-docker-hub.outputs.commit-hash }}-${{ needs.build-and-push-to-docker-hub.outputs.timestamp }}
        run: |
          echo "Pulling the Docker image from Docker Hub..."
          docker pull $DOCKER_HUB_REPO:$IMAGE_TAG

      - name: Tag and Push Docker Image to Amazon ECRs
        env:
          ECR_REGISTRY: public.ecr.aws/r9f0w2i7
          ECR_REPOSITORY: libraryfrontend
          DOCKER_HUB_REPO: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPO_NAME }}
          IMAGE_TAG: ${{ needs.build-and-push-to-docker-hub.outputs.commit-hash }}-${{ needs.build-and-push-to-docker-hub.outputs.timestamp }}
        run: |
          echo "Tagging the Docker image..."
          docker tag $DOCKER_HUB_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Pushing the Docker image to Amazon ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ecs:
    runs-on: ubuntu-latest
    env:
      EC2_SSH_PRIVATE_KEY: ${{ secrets.AWS_PRIVATE_KEY }}
      EC2_URL: 3.94.101.168
      EC2_USERNAME: swissiexe
    needs: build-and-push-to-docker-hub
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Deploy to EC2
        uses: omarhosny206/setup-ssh-for-ec2@v1.0.0
        with:
          EC2_SSH_PRIVATE_KEY: $EC2_SSH_PRIVATE_KEY
          EC2_URL: $EC2_URL

      - name: Deploy to EC2 Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          COMMIT_HASH: ${{ needs.build-and-push-to-docker-hub.outputs.commit-hash }}
          TIMESTAMP: ${{ needs.build-and-push-to-docker-hub.outputs.timestamp }}
        run: |
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_URL
            sudo docker pull $DOCKER_USERNAME/libraryfrontend:$COMMIT_HASH-$TIMESTAMP &&
            sudo docker stop cddemo || true &&
            sudo docker rm cddemo || true &&
            sudo docker run -d --name cddemo -p 80:3000 $DOCKER_USERNAME/libraryfrontend:$COMMIT_HASH-$TIMESTAMP
